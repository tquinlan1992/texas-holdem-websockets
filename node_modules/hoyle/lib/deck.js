// Generated by CoffeeScript 1.3.3
(function() {
  var Card, EventEmitter, crypto,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Card = require('./card').Card;

  crypto = require('crypto');

  EventEmitter = require('events').EventEmitter;

  exports.Deck = (function(_super) {

    __extends(Deck, _super);

    function Deck() {
      var value, _i, _len, _ref;
      this.cards = [];
      _ref = Card.VALUES.slice(1, 14);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        value = _ref[_i];
        this.cards.push(new Card("" + value + "s"));
        this.cards.push(new Card("" + value + "h"));
        this.cards.push(new Card("" + value + "d"));
        this.cards.push(new Card("" + value + "c"));
      }
    }

    Deck.prototype.shuffle = function(cb) {
      var i, length, rounds,
        _this = this;
      rounds = 3;
      length = Math.ceil(this.cards.length * Math.log(this.cards.length)) * rounds;
      i = 0;
      return crypto.randomBytes(length, function(ex, buf) {
        var k, _i;
        for (k = _i = 1; 1 <= rounds ? _i <= rounds : _i >= rounds; k = 1 <= rounds ? ++_i : --_i) {
          _this.cards.sort(function() {
            var j, val;
            j = i % length;
            val = buf[j];
            i++;
            if (val % 2 === 1) {
              return 1;
            } else {
              return -1;
            }
          });
        }
        _this.emit('shuffled');
        return typeof cb === "function" ? cb() : void 0;
      });
    };

    Deck.prototype.deal = function() {
      return this.cards.shift();
    };

    return Deck;

  })(EventEmitter);

}).call(this);
