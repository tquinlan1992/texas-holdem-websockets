// Generated by CoffeeScript 1.3.3
(function() {
  var Card, Flush, FourOfAKind, FullHouse, Hand, HighCard, OnePair, Straight, StraightFlush, ThreeOfAKind, TwoPair,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Card = require('./card').Card;

  exports.Hand = Hand = (function() {

    function Hand(cards) {
      var card, _base, _base1, _i, _len, _name, _name1, _ref;
      this.cardPool = [];
      this.cards = [];
      this.suits = {};
      this.values = [];
      this.cardPool = cards.map(function(c) {
        if (typeof c === 'string') {
          return new Card(c);
        } else {
          return c;
        }
      });
      this.cardPool.sort(Card.sort);
      _ref = this.cardPool;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        card = _ref[_i];
        (_base = this.suits)[_name = card.suit] || (_base[_name] = []);
        this.suits[card.suit].push(card);
        (_base1 = this.values)[_name1 = card.rank] || (_base1[_name1] = []);
        this.values[card.rank].push(card);
      }
      this.values.reverse();
      this.isPossible = this.make();
    }

    Hand.prototype.compare = function(a) {
      var result, x, _i;
      if (this.rank < a.rank) {
        return 1;
      } else if (this.rank > a.rank) {
        return -1;
      }
      result = 0;
      for (x = _i = 0; _i <= 4; x = ++_i) {
        if (this.cards[x].rank < a.cards[x].rank) {
          result = 1;
          break;
        } else if (this.cards[x].rank > a.cards[x].rank) {
          result = -1;
          break;
        }
      }
      return result;
    };

    Hand.prototype.beats = function(h) {
      var result;
      result = this.compare(h);
      if (result < 0) {
        return true;
      } else {
        return false;
      }
    };

    Hand.prototype.losesTo = function(h) {
      var result;
      result = this.compare(h);
      if (result > 0) {
        return true;
      } else {
        return false;
      }
    };

    Hand.prototype.ties = function(h) {
      var result;
      result = this.compare(h);
      if (result === 0) {
        return true;
      } else {
        return false;
      }
    };

    Hand.prototype.nextHighest = function(excluding) {
      var picks;
      excluding || (excluding = []);
      excluding = excluding.concat(this.cards);
      return picks = this.cardPool.filter(function(card) {
        if (excluding.indexOf(card) < 0) {
          return true;
        }
      });
    };

    Hand.prototype.make = function() {};

    Hand.prototype.toString = function() {
      var cards;
      cards = this.cards.map(function(c) {
        return c.toString();
      });
      return cards.join(",");
    };

    return Hand;

  })();

  Hand.pickWinners = function(hands) {
    var byRank, highestRank;
    byRank = hands.map(function(h) {
      return h.rank;
    });
    highestRank = Math.max.apply(Math, byRank);
    hands = hands.filter(function(h) {
      return h.rank === highestRank;
    });
    hands = hands.filter(function(h) {
      var hand, loses, _i, _len;
      loses = false;
      for (_i = 0, _len = hands.length; _i < _len; _i++) {
        hand = hands[_i];
        loses = h.losesTo(hand);
        if (loses) {
          break;
        }
      }
      return !loses;
    });
    return hands;
  };

  Hand.make = function(cards) {
    var hand, hands, result, _i, _len;
    hands = [StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, TwoPair, OnePair, HighCard];
    result = null;
    for (_i = 0, _len = hands.length; _i < _len; _i++) {
      hand = hands[_i];
      result = new hand(cards);
      if (result.isPossible) {
        break;
      }
    }
    return result;
  };

  exports.StraightFlush = StraightFlush = (function(_super) {

    __extends(StraightFlush, _super);

    function StraightFlush() {
      return StraightFlush.__super__.constructor.apply(this, arguments);
    }

    StraightFlush.prototype.name = "Straight Flush";

    StraightFlush.prototype.rank = 8;

    StraightFlush.prototype.make = function() {
      var cards, possibleStraight, straight, suit, _ref;
      possibleStraight = null;
      _ref = this.suits;
      for (suit in _ref) {
        cards = _ref[suit];
        if (cards.length >= 5) {
          possibleStraight = cards;
          break;
        }
      }
      if (possibleStraight) {
        straight = new Straight(possibleStraight);
        if (straight.isPossible) {
          this.cards = straight.cards;
        }
      }
      return this.cards.length === 5;
    };

    return StraightFlush;

  })(Hand);

  exports.FourOfAKind = FourOfAKind = (function(_super) {

    __extends(FourOfAKind, _super);

    function FourOfAKind() {
      return FourOfAKind.__super__.constructor.apply(this, arguments);
    }

    FourOfAKind.prototype.name = "Four of a kind";

    FourOfAKind.prototype.rank = 7;

    FourOfAKind.prototype.make = function() {
      var cards, _i, _len, _ref;
      _ref = this.values;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cards = _ref[_i];
        if (cards && cards.length === 4) {
          this.cards = cards;
          this.cards.push(this.nextHighest()[0]);
          break;
        }
      }
      return this.cards.length === 5;
    };

    return FourOfAKind;

  })(Hand);

  exports.FullHouse = FullHouse = (function(_super) {

    __extends(FullHouse, _super);

    function FullHouse() {
      return FullHouse.__super__.constructor.apply(this, arguments);
    }

    FullHouse.prototype.name = "Full house";

    FullHouse.prototype.rank = 6;

    FullHouse.prototype.make = function() {
      var cards, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.values;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cards = _ref[_i];
        if (cards && cards.length === 3) {
          this.cards = cards;
          break;
        }
      }
      if (this.cards.length === 3) {
        _ref1 = this.values;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          cards = _ref1[_j];
          if (cards && cards.length >= 2) {
            if (this.cards[0].value !== cards[0].value) {
              this.cards = this.cards.concat(cards.slice(0, 2));
              break;
            }
          }
        }
      }
      return this.cards.length === 5;
    };

    return FullHouse;

  })(Hand);

  exports.Flush = Flush = (function(_super) {

    __extends(Flush, _super);

    function Flush() {
      return Flush.__super__.constructor.apply(this, arguments);
    }

    Flush.prototype.name = "Flush";

    Flush.prototype.make = function() {
      var cards, suit, _ref;
      _ref = this.suits;
      for (suit in _ref) {
        cards = _ref[suit];
        if (cards.length >= 5) {
          this.cards = cards.slice(0, 5);
          break;
        }
      }
      return this.cards.length === 5;
    };

    Flush.prototype.rank = 5;

    return Flush;

  })(Hand);

  exports.Straight = Straight = (function(_super) {

    __extends(Straight, _super);

    function Straight() {
      return Straight.__super__.constructor.apply(this, arguments);
    }

    Straight.prototype.name = "Straight";

    Straight.prototype.make = function() {
      var card, diff, previousCard, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.cardPool;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        card = _ref[_i];
        if (card.value === "A") {
          this.cardPool.push(new Card("1" + card.suit));
        }
      }
      _ref1 = this.cardPool;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        card = _ref1[_j];
        previousCard = this.cards[this.cards.length - 1];
        diff = null;
        if (previousCard) {
          diff = previousCard.rank - card.rank;
        }
        if (diff > 1) {
          this.cards = [];
          this.cards.push(card);
        } else if (diff === 1) {
          this.cards.push(card);
        } else if (diff === null) {
          this.cards.push(card);
        }
        if (this.cards.length === 5) {
          break;
        }
      }
      return this.cards.length === 5;
    };

    Straight.prototype.rank = 4;

    return Straight;

  })(Hand);

  exports.ThreeOfAKind = ThreeOfAKind = (function(_super) {

    __extends(ThreeOfAKind, _super);

    function ThreeOfAKind() {
      return ThreeOfAKind.__super__.constructor.apply(this, arguments);
    }

    ThreeOfAKind.prototype.name = "Three of a kind";

    ThreeOfAKind.prototype.rank = 3;

    ThreeOfAKind.prototype.make = function() {
      var cards, _i, _len, _ref;
      _ref = this.values;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cards = _ref[_i];
        if (cards && cards.length === 3) {
          this.cards = cards;
          this.cards = this.cards.concat(this.nextHighest().slice(0, 2));
          break;
        }
      }
      return this.cards.length === 5;
    };

    return ThreeOfAKind;

  })(Hand);

  exports.TwoPair = TwoPair = (function(_super) {

    __extends(TwoPair, _super);

    function TwoPair() {
      return TwoPair.__super__.constructor.apply(this, arguments);
    }

    TwoPair.prototype.name = "Two pair";

    TwoPair.prototype.rank = 2;

    TwoPair.prototype.make = function() {
      var cards, _i, _len, _ref;
      _ref = this.values;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cards = _ref[_i];
        if (this.cards.length > 0 && cards && cards.length === 2) {
          this.cards = this.cards.concat(cards);
          this.cards.push(this.nextHighest()[0]);
          break;
        } else if (cards && cards.length === 2) {
          this.cards = this.cards.concat(cards);
        }
      }
      return this.cards.length === 5;
    };

    return TwoPair;

  })(Hand);

  exports.OnePair = OnePair = (function(_super) {

    __extends(OnePair, _super);

    function OnePair() {
      return OnePair.__super__.constructor.apply(this, arguments);
    }

    OnePair.prototype.name = "One pair";

    OnePair.prototype.rank = 1;

    OnePair.prototype.make = function() {
      var cards, _i, _len, _ref;
      _ref = this.values;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cards = _ref[_i];
        if (cards && cards.length === 2) {
          this.cards = this.cards.concat(cards);
          this.cards = this.cards.concat(this.nextHighest().slice(0, 3));
          break;
        }
      }
      return this.cards.length === 5;
    };

    return OnePair;

  })(Hand);

  exports.HighCard = HighCard = (function(_super) {

    __extends(HighCard, _super);

    function HighCard() {
      return HighCard.__super__.constructor.apply(this, arguments);
    }

    HighCard.prototype.name = "High card";

    HighCard.prototype.rank = 0;

    HighCard.prototype.make = function() {
      this.cards = this.cardPool.slice(0, 5);
      return true;
    };

    return HighCard;

  })(Hand);

}).call(this);
